import { JetpackSerializer } from './shared-types.js';
import JSON5 from 'json5';

export type Reviver = (key: string, value: unknown) => unknown;

// Matches strings generated by Date.toJSON() which is called to serialize date to JSON.
export const jsonDateParser = (key: string, value: unknown) => {
  const reISO =
    /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*))(?:Z|(\+|-)([\d|:]*))?$/;
  if (typeof value === "string") {
    if (reISO.exec(value)) {
      return new Date(value);
    }
  }
  return value;
};

export class Json implements JetpackSerializer<unknown, any> {
  constructor(public reviver: Reviver | undefined = undefined, public space = 0) {}
  parse(text: string) {
    return JSON.parse(text, this.reviver);
  }
  stringify(input: unknown) {
    return JSON.stringify(input, undefined, this.space);
  }
};

export class Json5 implements JetpackSerializer<unknown, any> {
  constructor(public reviver: Reviver | undefined = undefined, public space = 0) {}
  parse(text: string) {
    return JSON5.parse(text, this.reviver ? jsonDateParser : undefined);
  }
  stringify(input: unknown) {
    return JSON.stringify(input, undefined, this.space);
  }
};

/**
 * Note that we use a relatively inefficient all-at-once approach to parsing
 * NDJson here. NDJson is newline delimited precisely so that it can be processed
 * as a stream, so this is suboptimal even though it generates correct output.
 *
 * That said, the parse/stringify nomenclature fits our quick-and-dirty approach
 * to file format handling, so it's a win for now. Just don't lean on it for any
 * performance intensive stuff.
 */
export class NdJson implements JetpackSerializer<unknown[], any[]> {
  constructor(public reviver: Reviver | undefined = undefined) {}
  validate = (input: unknown) => Array.isArray(input);
  parse(data: string) {
    const lines = data.trim().split('\n');
    return lines.map((line) => JSON.parse(line, this.reviver));
  };
  stringify(data: unknown[]) {
    return data.map((item) => JSON.stringify(item, undefined, 0)).join('\n');
  };
};
